name: PR DBT Debug Info

on:
  pull_request:
    branches:
      - main  # or your main integration branch

permissions:
  contents: read
  pull-requests: write

jobs:
  dbt_debug:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout Base Branch
      - name: Checkout Base Branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.base_ref }}
          path: base

      # 2. Checkout PR Branch
      - name: Checkout PR Branch
        uses: actions/checkout@v4
        with:
          path: current

      # 3. Setup Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      # 4. Install dependencies
      - name: Install dependencies
        working-directory: ./current
        run: |
          pip install dbt-snowflake

      # 5. Create dbt profiles.yml
      - name: Configure dbt profiles
        run: |
          mkdir -p ~/.dbt
          cat <<EOF > ~/.dbt/profiles.yml
          ${{ secrets.DBT_PROFILES_YML }}
          EOF
        env:
          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
          SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
          SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
          SNOWFLAKE_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}

      # 6. Compile DBT project
      - name: Compile DBT Project
        working-directory: ./current
        run: |
          set +e
          echo "Compiling DBT project..."
          dbt compile --target dev --target-path target
          echo "Listing models in manifest..."
          if [ -f target/manifest.json ]; then
            cat target/manifest.json | jq '.nodes | keys' > dbt_nodes.json
          fi

      # 7. Collect debug info
      - name: Collect DBT Debug Info
        working-directory: ./current
        run: |
          set +e
          DEBUG_OUTPUT="dbt_debug.json"
          SUMMARY="{}"

          if [ -f dbt_nodes.json ]; then
            TOTAL_MODELS=$(jq '. | length' dbt_nodes.json)
            SUMMARY=$(jq -n --arg total "$TOTAL_MODELS" '{total_models: $total|tonumber}')
          else
            SUMMARY=$(jq -n '{error: "manifest.json or nodes list not found"}')
          fi

          echo $SUMMARY > $DEBUG_OUTPUT
          head -n 20 $DEBUG_OUTPUT

      # 8. Post PR comment
      - name: Post Debug Info to PR
        uses: actions/github-script@v6
        if: always()
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const debugFile = './current/dbt_debug.json';
            let body = '### DBT Debug Info ü§ñ\n\n';
            
            try {
              if (fs.existsSync(debugFile)) {
                const content = fs.readFileSync(debugFile, 'utf8');
                const parsed = JSON.parse(content);
                if (parsed.error) {
                  body += `‚ö†Ô∏è Error: ${parsed.error}\n\n`;
                } else {
                  body += `- **Total Models in Project:** ${parsed.total_models || 'N/A'}\n`;
                }
              } else {
                body += "‚ö†Ô∏è Debug file not found.\n";
              }
            } catch (err) {
              body += `‚ö†Ô∏è Failed to parse debug info: ${err.message}\n`;
            }

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            });
