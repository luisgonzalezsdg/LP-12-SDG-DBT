name: Recce Diff on PR

on:
  pull_request:
    branches:
      - main  # O 'develop' si es tu rama de integración

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  recce_diff:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout del código BASE (la rama a la que va el PR, ej: main)
      - name: Checkout Base Branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.base_ref }}
          path: 'base'

      # 2. Checkout del código ACTUAL (la rama del PR)
      - name: Checkout PR Branch
        uses: actions/checkout@v4
        with:
          path: 'current'

      # 3. Configurar Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      # 4. Instalar dependencias
      - name: Install dependencies
        working-directory: ./current
        run: |
          pip install dbt-snowflake recce
          dbt deps

      # 5. Crear profiles.yml usando secretos de GitHub
      - name: Configure dbt profiles
        run: |
          mkdir -p ~/.dbt
          cat << EOF > ~/.dbt/profiles.yml
          ${{ secrets.DBT_PROFILES_YML }}
          EOF
        env:
          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
          SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
          SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
          SNOWFLAKE_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}
          SNOWFLAKE_SCHEMA_DEV: 'DEV'
          SNOWFLAKE_SCHEMA_PROD: 'DBT_LGONZALEZ'

      # 6. Generar artefactos BASE (usando el código 'base' y target 'prod')
      - name: Generate Base Artifacts
        working-directory: ./base
        run: |
          echo "Compiling base..."
          dbt compile --target prod --target-path ../current/target-base
          echo "Generating base docs..."
          dbt docs generate --target prod --target-path ../current/target-base

      # 7. Generar artefactos ACTUALES (usando el código 'current' y target 'dev')
      - name: Generate Current Artifacts
        working-directory: ./current
        run: |
          echo "Compiling current..."
          dbt compile --target dev --target-path target
          echo "Generating current docs..."
          dbt docs generate --target dev --target-path target

      # 8. Ejecutar Recce Diff y capturar el resultado
      - name: Run Recce Diff
        working-directory: ./current
        id: recce_run
        continue-on-error: true # Continúa aunque recce encuentre diferencias (exit code 1)
        run: |
          # Ejecuta 'recce run' para comparar y guarda el resultado en un archivo JSON
          recce run --target dev --output json --no-browser > recce_results.json
          EXIT_CODE=$?
          echo "Recce exit code: $EXIT_CODE"
          if [ $EXIT_CODE -eq 0 ]; then
            echo "summary=Recce found no differences." >> $GITHUB_OUTPUT
            echo "conclusion=success" >> $GITHUB_OUTPUT
          elif [ $EXIT_CODE -eq 1 ]; then
            echo "summary=Recce found differences!" >> $GITHUB_OUTPUT
            echo "conclusion=failure" >> $GITHUB_OUTPUT
          else
            echo "summary=Recce execution failed (Exit Code: $EXIT_CODE). Check logs." >> $GITHUB_OUTPUT
            echo "conclusion=failure" >> $GITHUB_OUTPUT
          fi

      # 9. Publicar los resultados de Recce en el Pull Request
      - name: Post Recce Results to PR
        uses: actions/github-script@v6
        if: always() # Se ejecuta siempre para reportar el estado, incluso si el paso anterior falló
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const recceOutputFile = './current/recce_results.json';
            let body = '### Recce Diff Results 🤖\n\n';
            let conclusion = '${{ steps.recce_run.outputs.conclusion }}' || 'failure';
            let summary = '${{ steps.recce_run.outputs.summary }}' || 'Recce check failed to produce output.';

            try {
              if (fs.existsSync(recceOutputFile)) {
                const results = JSON.parse(fs.readFileSync(recceOutputFile, 'utf8'));
                if (results && results.summary) {
                   body += `- **Models Checked:** ${results.summary.total || 'N/A'}\n`;
                   body += `- **Models with Diff:** ${results.summary.modified || 0}\n`;
                   body += `- **Models Added:** ${results.summary.added || 0}\n`;
                   body += `- **Models Removed:** ${results.summary.removed || 0}\n\n`;
                }
              } else {
                 body += `Recce output file not found. ${summary}\n Check Action logs.\n`;
                 conclusion = 'failure';
              }
            } catch (error) {
              console.error(`Error processing Recce results: ${error}`);
              body += `Failed to process Recce report. ${summary}\n Error: ${error.message}\n`;
              conclusion = 'failure';
            }

            // Publica el comentario en el PR
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

            // Crea o actualiza el "Status Check" en el PR
            github.rest.checks.create({
               owner: context.repo.owner,
               repo: context.repo.repo,
               name: 'Recce Diff Check',
               head_sha: context.payload.pull_request.head.sha,
               status: 'completed',
               conclusion: conclusion,
               output: {
                 title: 'Recce Diff Results',
                 summary: summary
               }
             });
