name: PR DBT Debug Info

on:
  pull_request:
    branches:
      - main

permissions:
  contents: read
  pull-requests: write

jobs:
  dbt_debug:
    runs-on: ubuntu-latest
    env:
      SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
      SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
      SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
      SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
      SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
      SNOWFLAKE_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}

    steps:
      # 1. Checkout Base Branch
      - name: Checkout Base Branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.base_ref }}
          path: base

      # 2. Checkout PR Branch
      - name: Checkout PR Branch
        uses: actions/checkout@v4
        with:
          path: current

      # 3. Setup Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      # 4. Install dependencies
      - name: Install dependencies
        working-directory: ./current
        run: |
          pip install dbt-snowflake jq

      # 5. Configure dbt profiles
      - name: Configure dbt profiles
        run: |
          mkdir -p ~/.dbt
          cat <<'EOF' > ~/.dbt/profiles.yml
${{ secrets.DBT_PROFILES_YML }}
EOF
          cat ~/.dbt/profiles.yml

      # 6. Compile DBT Project
      - name: Compile DBT Project
        working-directory: ./current
        run: |
          set -x
          dbt debug
          dbt compile --target dev --target-path target || true
          if [ -f target/manifest.json ]; then
            jq '.nodes | keys' target/manifest.json > dbt_nodes.json
          fi
          ls -al target

      # 7. Detect changed DBT models
      - name: Detect Changed DBT Models
        working-directory: ./current
        run: |
          # Ensure full history is available
          git fetch origin ${{ github.base_ref }} --unshallow || true
          BASE=$(git merge-base origin/${{ github.base_ref }} HEAD)
          CHANGED_MODELS=$(git diff --name-only $BASE HEAD models/ | grep '\.sql$' || true)
          echo "$CHANGED_MODELS" > changed_models.txt

          # Map changed files to DBT node names using manifest.json
          if [ -f target/manifest.json ] && [ -s changed_models.txt ]; then
            CHANGED_NODES=$(jq -r --slurpfile files changed_models.txt \
              '[.nodes[] | select(.original_file_path as $p | $files | index($p)) | .name] | join(", ")' \
              target/manifest.json)
            echo "$CHANGED_NODES" > changed_nodes.txt
          else
            echo "" > changed_nodes.txt
          fi

      # 8. Collect enhanced debug info
      - name: Collect Enhanced DBT Debug Info
        working-directory: ./current
        run: |
          DEBUG_OUTPUT="dbt_debug.json"

          if [ -f target/manifest.json ]; then
            TOTAL_MODELS=$(jq '[.nodes[] | select(.resource_type=="model")] | length' target/manifest.json)
            TOTAL_SOURCES=$(jq '[.sources[]] | length' target/manifest.json)
            TOTAL_TESTS=$(jq '[.nodes[] | select(.resource_type=="test")] | length' target/manifest.json)
            TOTAL_SEEDS=$(jq '[.nodes[] | select(.resource_type=="seed")] | length' target/manifest.json)
            SAMPLE_MODELS=$(jq -r '[.nodes[] | select(.resource_type=="model") | .name] | .[:10] | join(", ")' target/manifest.json)

            if [ -f changed_nodes.txt ]; then
              CHANGED_NODES=$(cat changed_nodes.txt)
            else
              CHANGED_NODES=""
            fi

            SUMMARY=$(jq -n \
              --arg total_models "$TOTAL_MODELS" \
              --arg total_sources "$TOTAL_SOURCES" \
              --arg total_tests "$TOTAL_TESTS" \
              --arg total_seeds "$TOTAL_SEEDS" \
              --arg sample_models "$SAMPLE_MODELS" \
              --arg changed_nodes "$CHANGED_NODES" \
              '{
                total_models: ($total_models|tonumber),
                total_sources: ($total_sources|tonumber),
                total_tests: ($total_tests|tonumber),
                total_seeds: ($total_seeds|tonumber),
                sample_models: $sample_models,
                changed_models: $changed_nodes
              }')
          else
            SUMMARY=$(jq -n '{error: "manifest.json not found"}')
          fi

          echo $SUMMARY > $DEBUG_OUTPUT
          head -n 20 $DEBUG_OUTPUT

      # 9. Post PR comment
      - name: Post Debug Info to PR
        uses: actions/github-script@v6
        if: always()
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const debugFile = './current/dbt_debug.json';
            let body = '### DBT Debug Info ü§ñ\n\n';
            
            try {
              if (fs.existsSync(debugFile)) {
                const content = fs.readFileSync(debugFile, 'utf8');
                const parsed = JSON.parse(content);
                if (parsed.error) {
                  body += `‚ö†Ô∏è Error: ${parsed.error}\n\n`;
                } else {
                  body += `- **Total Models:** ${parsed.total_models}\n`;
                  body += `- **Total Sources:** ${parsed.total_sources}\n`;
                  body += `- **Total Tests:** ${parsed.total_tests}\n`;
                  body += `- **Total Seeds:** ${parsed.total_seeds}\n`;
                  body += `- **Sample Models:** ${parsed.sample_models}\n`;
                  body += `- **Changed Models in PR:** ${parsed.changed_models || 'None'}\n`;
                }
              } else {
                body += "‚ö†Ô∏è Debug file not found.\n";
              }
            } catch (err) {
              body += `‚ö†Ô∏è Failed to parse debug info: ${err.message}\n`;
            }

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            });
